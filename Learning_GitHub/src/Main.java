public class Main {
    public static void main(String[] args) {
        System.out.println("Книга по изучению GitHub: " + "https://git-scm.com/book/ru/v2");
    }
}

/**
 * Содержание:
 * 1. [cmd]
 * 2. [git ...]
 * <p>
 * 1.9. Жизненный цикл файлов в репозитории
 * 1.10. Игнорирование изменений
 * 1.11. Работа с Git в средах разработки
 * <p>
 * 2.2. Удалённые и локальные репозитории
 * 2.3. GitHub и GitLab: обзор систем
 * 2.4. Регистрация на GitHub и создание удалённого репозитория
 * 2.5. Создание SSH-ключа
 * 2.6. Подключение к удалённому репозиторию
 * 2.7. Внесение изменений и их отправка
 * 2.8. Обновление локального репозитория
 * 2.9. Разрешение конфликтов при обновлении репозитория
 * <p>
 * 3.2. Ветки: создание и работа
 * <p>
 * 3.3. Работа с удалёнными ветками
 * 1. [cmd]
 * 1. перемещения по папкам:
 * [переход на другой диск]                                       D:
 * [переход в нижестоящий каталог]                                cd learning
 * [переход на каталог, находящийся выше]                         сd ..
 * [переход в корневой каталог]                                   cd \
 * <p>
 * [просмотр содержимого каталога]                                dir
 * <p>
 * <p>
 * 2. [git ...]
 * [создание репозитория в директории]                            git init
 * [клонировать удаленный репозиторий в локальный]                git clone
 * [проверка наличия изменений в локальном репозитории]           git status
 * [посмотреть информацию о последнем коммите и его содержимом]   git show
 * [выход из режима просмотра команды git show]           q
 * [просмотреть историю всех коммитов]                            git log
 * <p>
 * <p>
 * [добавление файлов и папок в индекс]
 * [добавление всех внесенных изменений без исключений]        git add .
 * [добавление конкретных измененных файлов]                   git add Learning_GitHub/src/SB_02.java
 * <p>
 * [сохранить изменения в локальном репозитории после git add]    git commit -m "some changed"
 * <p>
 * [установить путь от локального репозитория к удаленному]       git remote add origin https://github.com/maksimkoniushev/new-project.git
 * [просмотреть путь от локального репозитория к удаленному]      git remote -v
 * [удалить путь от локального репозитория к удаленному]          git remote remove origin
 * <p>
 * [запушить локальный репозиторий на удаленный впервые]          git push -u origin master
 * [запушить локальный репозиторий на удаленный повторно]         git push
 * <p>
 * [скачать с удаленного репозитория актуальное содержимое]       git pull
 * <p>
 * 1.9. Жизненный цикл файлов в репозитории
 * Три состояния файлов:
 * [закоммичен]                                                  committed
 * [изменен]                                                     not staged
 * [готов к коммиту]                                             staged
 * <p>
 * [просмотр статуса файлов]                                     git status
 * [закоммитить файлы и папки]                                   git commit -m "some change"
 * <p>
 * Фразы и выражения в командной строке (cmd)
 * [изменения добавлены git add в индекс и готовы к коммиту]     Changes to be committed:
 * [изменения файлов не добавленные в индекс]                    Changes not staged for commit:
 * [изменения, которые не отслеживаются Git]                     Untracked files:
 * 1.10. Игнорирование изменений
 * Что следует исключить от включения в репозиторий:
 * [логи] - постоянно меняются и будут подсвечиватся красным при вводе git status
 * [пользовательские файлы] - базы данных, фотографии, ...
 * [файлы среды разработки] - настройки конкретного разработчика
 * [внешние библиотеки]
 * [файлы локальной конфигурации]
 * [файлы операционной системы]
 * [слишком большие файлы]
 * <p>
 * [создание файла, исключающего попадания файлов в индекс]      .gitignore
 * [исключить отдельный файл]                                errors.log
 * [исключить группу файлов с помощью маски]                 *.log
 * [исключить файл из исключения с помощью маски]            !debug.log
 * [исключить католаг]                                       log/
 * [исключить маску файлов в нижестоящем каталоге]           log/*.log
 * 1.11. Работа с Git в средах разработки
 * [создание нового проекта Java без репозитория]               GitExample_1
 * [инициализация репозитория для проекта]
 * [Панель управления:]                                      [VKS] -->
 * [Enable Version Control Integration] >
 * [Git]
 * [включение в .gitignore:]
 * [каталог:]                                               .idea
 * [каталог:]                                               out
 * [файл:]                                                  GitExample_1.iml
 * <p>
 * [ПКМ:]                                                   [Git] -->
 * [Add to .gitignore] -->
 * [Add to .gitignore]
 * [Java предлагает включить .gitignore в область индекса]    [Yes]
 * <p>
 * [цвета в области Project:]
 * [файлы, исключенные от отслеживания - (.gitignore)]     желтый
 * [файлы не внесенные в индекс - не закоммиченые]         красный
 * [файлы, добавленные в индекс]                           зеленый
 * [закоммиченые файлы]                                    белый
 * [измененные (после коммита) строки кода, файлы]         синий
 * <p>
 * <p>
 * [сделаем коммит для Class Main и файла .gitignore]
 * [Панель управления: ]                                  [Commit] или [CTRL-K]
 * <p>
 * [сделаем изменения в Class Main]
 * [сделаем коммит изменений]
 * <p>
 * [посмотрим историю коммитов]
 * [ПКМ в Project)]                                      [Git] -->
 * [Show history]
 * <p>
 * [сравним два коммита]
 * [выделим нужные коммиты]
 * [ПКМ на выделенных коммитах]                         [Compare Version]
 * [выберем то, что необходимо сравнить]
 * <p>
 * [цвета в области Changed:]
 * [добавленные строки]                                  зеленый
 * [измененные строки]                                   синий
 * <p>
 * 2.6. Подключение к удалённому репозиторию
 * Ситуация №1:
 * [УДАЛЕННЫЙ РЕПОЗИТОРИЙ] - есть
 * [ЛОКАЛЬНЫЙ РЕПОЗИТОРИЙ] - нет
 * <p>
 * D:\Learning\Java\Repositories>git clone git@github.com:maksimkoniushev/repo-github.git
 * <p>
 * Ситуация №2:
 * [УДАЛЕННЫЙ РЕПОЗИТОРИЙ] - нет
 * [ЛОКАЛЬНЫЙ РЕПОЗИТОРИЙ] - нет
 * <p>
 * [1. создание нового УДАЛЕННОГО РЕПОЗИТОРИЯ]
 * [1.1. Quick setup - if you've done this kind of things before:]
 * [1.1.1.]                                                      [creating a new file]
 * [1.1.2.]                                                      [uploading an existing file]
 * [1.2. .. or create a new repository on the command line>
 * [создать файл README.md с текстом # new-project]              [echo "# new-project" >> README.md]
 * [инициализировать репозиторий]                                [git init]
 * [добавить файл README.md в индекс]                            [git add .]
 * [сделать коммит]                                              [git commit -m "first commit"]
 * [создать ветвь]                                               [git branch -M master]
 * [установить соединение с удаленным репозиторием]              [git remote add origin https://github.com/maksimkoniushev/new-project.git]
 * [запушить содержимое локального репозитория на удаленный]     [git push -u origin master]
 * <p>
 * Ситуация №3:
 * [УДАЛЕННЫЙ РЕПОЗИТОРИЙ] - нет
 * [ЛОКАЛЬНЫЙ РЕПОЗИТОРИЙ] - есть
 * <p>
 * [1.3. .. or push an existing repository from the command line>
 * <p>
 * [1. создание нового УДАЛЕННОГО РЕПОЗИТОРИЯ]
 * <p>
 * [установить соединение с удаленным репозиторием]              [git remote add origin https://github.com/maksimkoniushev/new-project.git]
 * [создать ветвь]                                               [git branch -M master]
 * [запушить содержимое локального репозитория на удаленный]     [git push -u origin master]
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * 3.2. Ветки: создание и работа
 * [просмотр рабочей ветки]                                       git status
 * [просмотреть имеющиеся в репозитории ветки]                    git branch
 * [создание новой ветки]                                         git branch basket-delivery-option
 * [переключение на существующую ветку]                           git checkout basket-delivery-option
 * [создание и переключение на ную созданную ветку]     git checkout -b basket-delivery-option
 * <p>
 * [переключение на существующую ветку]                           git checkout master
 * [просмотреть все коммиты в данной ветке]                       git log
 */


/** 1. [cmd]
 *  1. перемещения по папкам:
 *     [переход на другой диск]                                       D:
 *     [переход в нижестоящий каталог]                                cd learning
 *     [переход на каталог, находящийся выше]                         сd ..
 *     [переход в корневой каталог]                                   cd \
 *
 *     [просмотр содержимого каталога]                                dir
 *
 *
 */

/** 2. [git ...]
 *     [создание репозитория в директории]                            git init
 *     [клонировать удаленный репозиторий в локальный]                git clone
 *     [проверка наличия изменений в локальном репозитории]           git status
 *     [посмотреть информацию о последнем коммите и его содержимом]   git show
 *             [выход из режима просмотра команды git show]           q
 *     [просмотреть историю всех коммитов]                            git log
 *
 *
 *     [добавление файлов и папок в индекс]
 *        [добавление всех внесенных изменений без исключений]        git add .
 *        [добавление конкретных измененных файлов]                   git add Learning_GitHub/src/SB_02.java
 *
 *     [сохранить изменения в локальном репозитории после git add]    git commit -m "some changed"
 *
 *     [установить путь от локального репозитория к удаленному]       git remote add origin https://github.com/maksimkoniushev/new-project.git
 *     [просмотреть путь от локального репозитория к удаленному]      git remote -v
 *     [удалить путь от локального репозитория к удаленному]          git remote remove origin
 *
 *     [запушить локальный репозиторий на удаленный впервые]          git push -u origin master
 *     [запушить локальный репозиторий на удаленный повторно]         git push
 *
 *     [скачать с удаленного репозитория актуальное содержимое]       git pull
 *
 */

/** 1.9. Жизненный цикл файлов в репозитории
 *   Три состояния файлов:
 *      [закоммичен]                                                  committed
 *      [изменен]                                                     not staged
 *      [готов к коммиту]                                             staged
 *
 *      [просмотр статуса файлов]                                     git status
 *      [закоммитить файлы и папки]                                   git commit -m "some change"
 *
 *   Фразы и выражения в командной строке (cmd)
 *      [изменения добавлены git add в индекс и готовы к коммиту]     Changes to be committed:
 *      [изменения файлов не добавленные в индекс]                    Changes not staged for commit:
 *      [изменения, которые не отслеживаются Git]                     Untracked files:
 */

/** 1.10. Игнорирование изменений
 *   Что следует исключить от включения в репозиторий:
 *      [логи] - постоянно меняются и будут подсвечиватся красным при вводе git status
 *      [пользовательские файлы] - базы данных, фотографии, ...
 *      [файлы среды разработки] - настройки конкретного разработчика
 *      [внешние библиотеки]
 *      [файлы локальной конфигурации]
 *      [файлы операционной системы]
 *      [слишком большие файлы]
 *
 *      [создание файла, исключающего попадания файлов в индекс]      .gitignore
 *          [исключить отдельный файл]                                errors.log
 *          [исключить группу файлов с помощью маски]                 *.log
 *          [исключить файл из исключения с помощью маски]            !debug.log
 *          [исключить католаг]                                       log/
 *          [исключить маску файлов в нижестоящем каталоге]           log/*.log
 */

/** 1.11. Работа с Git в средах разработки
 *       [создание нового проекта Java без репозитория]               GitExample_1
 *       [инициализация репозитория для проекта]
 *          [Панель управления:]                                      [VKS] -->
 *                                                                    [Enable Version Control Integration] >
 *                                                                    [Git]
 *        [включение в .gitignore:]
 *           [каталог:]                                               .idea
 *           [каталог:]                                               out
 *           [файл:]                                                  GitExample_1.iml
 *
 *           [ПКМ:]                                                   [Git] -->
 *                                                                    [Add to .gitignore] -->
 *                                                                    [Add to .gitignore]
 *         [Java предлагает включить .gitignore в область индекса]    [Yes]
 *
 *         [цвета в области Project:]
 *            [файлы, исключенные от отслеживания - (.gitignore)]     желтый
 *            [файлы не внесенные в индекс - не закоммиченые]         красный
 *            [файлы, добавленные в индекс]                           зеленый
 *            [закоммиченые файлы]                                    белый
 *            [измененные (после коммита) строки кода, файлы]         синий
 *
 *
 *         [сделаем коммит для Class Main и файла .gitignore]
 *             [Панель управления: ]                                  [Commit] или [CTRL-K]
 *
 *         [сделаем изменения в Class Main]
 *         [сделаем коммит изменений]
 *
 *         [посмотрим историю коммитов]
 *              [ПКМ в Project)]                                      [Git] -->
 *                                                                    [Show history]
 *
 *          [сравним два коммита]
 *              [выделим нужные коммиты]
 *              [ПКМ на выделенных коммитах]                         [Compare Version]
 *              [выберем то, что необходимо сравнить]
 *
 *          [цвета в области Changed:]
 *              [добавленные строки]                                  зеленый
 *              [измененные строки]                                   синий
 *
 */

/** 2.6. Подключение к удалённому репозиторию
 * Ситуация №1:
 *    [УДАЛЕННЫЙ РЕПОЗИТОРИЙ] - есть
 *    [ЛОКАЛЬНЫЙ РЕПОЗИТОРИЙ] - нет
 *
 * D:\Learning\Java\Repositories>git clone git@github.com:maksimkoniushev/repo-github.git
 *
 * Ситуация №2:
 *    [УДАЛЕННЫЙ РЕПОЗИТОРИЙ] - нет
 *    [ЛОКАЛЬНЫЙ РЕПОЗИТОРИЙ] - нет
 *
 * [1. создание нового УДАЛЕННОГО РЕПОЗИТОРИЯ]
 *   [1.1. Quick setup - if you've done this kind of things before:]
 *     [1.1.1.]                                                      [creating a new file]
 *     [1.1.2.]                                                      [uploading an existing file]
 *   [1.2. .. or create a new repository on the command line>
 *     [создать файл README.md с текстом # new-project]              [echo "# new-project" >> README.md]
 *     [инициализировать репозиторий]                                [git init]
 *     [добавить файл README.md в индекс]                            [git add .]
 *     [сделать коммит]                                              [git commit -m "first commit"]
 *     [создать ветвь]                                               [git branch -M master]
 *     [установить соединение с удаленным репозиторием]              [git remote add origin https://github.com/maksimkoniushev/new-project.git]
 *     [запушить содержимое локального репозитория на удаленный]     [git push -u origin master]
 *
 * Ситуация №3:
 *    [УДАЛЕННЫЙ РЕПОЗИТОРИЙ] - нет
 *    [ЛОКАЛЬНЫЙ РЕПОЗИТОРИЙ] - есть
 *
 *   [1.3. .. or push an existing repository from the command line>
 *
 *    [1. создание нового УДАЛЕННОГО РЕПОЗИТОРИЯ]
 *
 *      [установить соединение с удаленным репозиторием]              [git remote add origin https://github.com/maksimkoniushev/new-project.git]
 *      [создать ветвь]                                               [git branch -M master]
 *      [запушить содержимое локального репозитория на удаленный]     [git push -u origin master]
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

/**  3.2. Ветки: создание и работа
 *     [просмотр рабочей ветки]                                       git status
 *     [просмотреть имеющиеся в репозитории ветки]                    git branch
 *     [создание новой ветки]                                         git branch basket-delivery-option
 *     [переключение на существующую ветку]                           git checkout basket-delivery-option
 *               [создание и переключение на ную созданную ветку]     git checkout -b basket-delivery-option
 *
 *     [переключение на существующую ветку]                           git checkout master
 *     [просмотреть все коммиты в данной ветке]                       git log
 *
 */